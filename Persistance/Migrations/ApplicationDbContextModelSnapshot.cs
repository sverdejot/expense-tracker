// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Persistance;

#nullable disable

namespace Persistance.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetBudgetAlert", b =>
                {
                    b.Property<Guid>("AlertsBudgetAlertId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.HasKey("AlertsBudgetAlertId", "BudgetId");

                    b.HasIndex("BudgetId");

                    b.ToTable("BudgetBudgetAlert");
                });

            modelBuilder.Entity("BudgetBudgetRecord", b =>
                {
                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordsBudgetRecordId")
                        .HasColumnType("uuid");

                    b.HasKey("BudgetId", "RecordsBudgetRecordId");

                    b.HasIndex("RecordsBudgetRecordId");

                    b.ToTable("BudgetBudgetRecord");
                });

            modelBuilder.Entity("Domain.Budgets.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Owner")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("MaximumAmount", "Domain.Budgets.Budget.MaximumAmount#BudgetAmount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Period", "Domain.Budgets.Budget.Period#BudgetPeriod", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("timestamp with time zone");
                        });

                    b.HasKey("Id");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("Domain.Budgets.BudgetAlert", b =>
                {
                    b.Property<Guid>("BudgetAlertId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("BudgetAlertId");

                    b.HasIndex("BudgetAlertId");

                    b.ToTable("BudgetAlert");

                    b.HasDiscriminator<string>("Discriminator").HasValue("BudgetAlert");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Domain.Budgets.BudgetRecord", b =>
                {
                    b.Property<Guid>("BudgetRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Currency")
                        .HasColumnType("integer");

                    b.Property<Guid>("ExpenseId")
                        .HasColumnType("uuid");

                    b.HasKey("BudgetRecordId");

                    b.HasIndex("BudgetRecordId");

                    b.ToTable("BudgetRecord");
                });

            modelBuilder.Entity("Domain.Expenses.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<Guid>("User")
                        .HasColumnType("uuid");

                    b.ComplexProperty<Dictionary<string, object>>("Amount", "Domain.Expenses.Expense.Amount#ExpenseAmount", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Currency")
                                .HasColumnType("integer");

                            b1.Property<decimal>("Quantity")
                                .HasColumnType("numeric");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("Domain.Groups.Group", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Admin")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("Mail");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Persistance.Outbox.OutboxRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("OutboxRecords");
                });

            modelBuilder.Entity("Domain.Budgets.DateBudgetAlert", b =>
                {
                    b.HasBaseType("Domain.Budgets.BudgetAlert");

                    b.Property<DateTime>("AlertingDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasDiscriminator().HasValue("DateBudgetAlert");
                });

            modelBuilder.Entity("BudgetBudgetAlert", b =>
                {
                    b.HasOne("Domain.Budgets.BudgetAlert", null)
                        .WithMany()
                        .HasForeignKey("AlertsBudgetAlertId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Budgets.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetBudgetRecord", b =>
                {
                    b.HasOne("Domain.Budgets.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Budgets.BudgetRecord", null)
                        .WithMany()
                        .HasForeignKey("RecordsBudgetRecordId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Groups.Group", b =>
                {
                    b.OwnsMany("Domain.Groups.GroupRecord", "Records", b1 =>
                        {
                            b1.Property<Guid>("GroupRecordId")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric");

                            b1.Property<Guid>("Creator")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid");

                            b1.HasKey("GroupRecordId");

                            b1.HasIndex("GroupId");

                            b1.ToTable("GroupRecord");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");

                            b1.OwnsMany("Domain.RecordPercentage", "Percentages", b2 =>
                                {
                                    b2.Property<Guid>("MemberPercentageId")
                                        .ValueGeneratedOnAdd()
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("GroupRecordId")
                                        .HasColumnType("uuid");

                                    b2.Property<Guid>("Member")
                                        .HasColumnType("uuid");

                                    b2.Property<decimal>("Percentage")
                                        .HasColumnType("numeric");

                                    b2.HasKey("MemberPercentageId");

                                    b2.HasIndex("GroupRecordId");

                                    b2.ToTable("RecordPercentage");

                                    b2.WithOwner()
                                        .HasForeignKey("GroupRecordId");
                                });

                            b1.Navigation("Percentages");
                        });

                    b.OwnsMany("Domain.MemberId", "Members", b1 =>
                        {
                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("GroupId")
                                .HasColumnType("uuid");

                            b1.HasKey("Value");

                            b1.HasIndex("GroupId");

                            b1.ToTable("MemberId");

                            b1.WithOwner()
                                .HasForeignKey("GroupId");
                        });

                    b.Navigation("Members");

                    b.Navigation("Records");
                });
#pragma warning restore 612, 618
        }
    }
}
